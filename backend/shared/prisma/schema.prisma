generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  password           String
  firstName          String
  lastName           String
  phone              String?
  businessName       String?
  businessType       BusinessType?
  registrationNumber String?
  address            String?
  city               String?
  state              String?
  country            String?
  postalCode         String?
  eKycStatus         EKycStatus @default(PENDING)
  isVerified         Boolean   @default(false)
  isActive           Boolean   @default(true)
  score              Int?
  lastLoginAt        DateTime?
  emailVerifiedAt    DateTime?
  phoneVerifiedAt    DateTime?
  passwordResetAt    DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  documents       Document[]
  refreshTokens   RefreshToken[]
  otpVerifications OtpVerification[]
  scoreHistories  ScoreHistory[]
  notifications   Notification[]
  auditLogs       AuditLog[]
  sessions        UserSession[]

  @@map("users")
  @@index([email])
  @@index([eKycStatus])
  @@index([isActive])
  @@index([businessName])
  @@index([createdAt])
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
  @@index([userId])
  @@index([sessionId])
  @@index([expiresAt])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model OtpVerification {
  id        String      @id @default(cuid())
  userId    String
  code      String
  type      OtpType
  purpose   OtpPurpose
  expiresAt DateTime
  isUsed    Boolean     @default(false)
  attempts  Int         @default(0)
  createdAt DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("otp_verifications")
  @@index([userId])
  @@index([code])
  @@index([expiresAt])
  @@index([type, purpose])
}

model Document {
  id           String         @id @default(cuid())
  userId       String
  fileName     String
  originalName String
  mimeType     String
  size         Int
  s3Key        String         @unique
  s3Url        String
  documentType DocumentType
  status       DocumentStatus @default(UPLOADED)
  uploadedAt   DateTime       @default(now())
  processedAt  DateTime?
  verifiedAt   DateTime?
  rejectedAt   DateTime?
  rejectionReason String?
  metadata     Json?
  checksum     String?
  version      Int           @default(1)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
  @@index([userId])
  @@index([documentType])
  @@index([status])
  @@index([s3Key])
  @@index([uploadedAt])
  @@index([verifiedAt])
}

model ScoreHistory {
  id            String   @id @default(cuid())
  userId        String
  totalScore    Int
  personalInfo  Int
  businessInfo  Int
  documents     Int
  verification  Int
  factors       String[]
  recommendations String[]
  calculatedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("score_histories")
  @@index([userId])
  @@index([calculatedAt])
  @@index([totalScore])
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  channel     NotificationChannel
  recipient   String
  subject     String?
  message     String
  templateId  String?
  data        Json?
  status      NotificationStatus @default(PENDING)
  sentAt      DateTime?
  deliveredAt DateTime?
  failedAt    DateTime?
  errorMessage String?
  retryCount  Int             @default(0)
  createdAt   DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([channel])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  resourceId String?
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([resourceId])
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  description String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
  @@index([key])
  @@index([isActive])
}

model BusinessRegistry {
  id                String   @id @default(cuid())
  registrationNumber String  @unique
  businessName      String
  businessType      String
  status            String
  registrationDate  DateTime
  address           String?
  country           String
  isVerified        Boolean  @default(false)
  verifiedAt        DateTime?
  lastCheckedAt     DateTime @default(now())
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("business_registry")
  @@index([registrationNumber])
  @@index([businessName])
  @@index([country])
  @@index([status])
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  userId    String?
  scopes    String[]
  isActive  Boolean  @default(true)
  expiresAt DateTime?
  lastUsedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("api_keys")
  @@index([key])
  @@index([userId])
  @@index([isActive])
}

model WebhookEndpoint {
  id        String   @id @default(cuid())
  userId    String
  url       String
  events    String[]
  secret    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deliveries WebhookDelivery[]

  @@map("webhook_endpoints")
  @@index([userId])
  @@index([isActive])
}

model WebhookDelivery {
  id         String   @id @default(cuid())
  endpointId String
  eventType  String
  payload    Json
  status     String   @default("pending")
  attempts   Int      @default(0)
  lastAttempt DateTime?
  nextAttempt DateTime?
  responseCode Int?
  responseBody String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  endpoint WebhookEndpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)

  @@map("webhook_deliveries")
  @@index([endpointId])
  @@index([status])
  @@index([eventType])
  @@index([createdAt])
}

model FileUpload {
  id        String   @id @default(cuid())
  userId    String?
  fileName  String
  mimeType  String
  size      Int
  s3Key     String   @unique
  s3Url     String
  purpose   String?
  metadata  Json?
  isTemporary Boolean @default(false)
  expiresAt DateTime?
  createdAt DateTime @default(now())

  @@map("file_uploads")
  @@index([userId])
  @@index([s3Key])
  @@index([purpose])
  @@index([isTemporary])
  @@index([expiresAt])
}

model RateLimit {
  id        String   @id @default(cuid())
  identifier String  // IP address, user ID, API key, etc.
  type      String   // 'ip', 'user', 'api_key'
  endpoint  String
  count     Int      @default(1)
  windowStart DateTime
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("rate_limits")
  @@unique([identifier, type, endpoint, windowStart])
  @@index([identifier, type])
  @@index([expiresAt])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  usedAt    DateTime?
  createdAt DateTime @default(now())

  @@map("password_resets")
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  isVerified Boolean @default(false)
  verifiedAt DateTime?
  createdAt DateTime @default(now())

  @@map("email_verifications")
  @@index([token])
  @@index([userId])
  @@index([email])
  @@index([expiresAt])
}

// Enums
enum BusinessType {
  SOLE_PROPRIETORSHIP
  PARTNERSHIP
  CORPORATION
  LLC
  NONPROFIT
  COOPERATIVE
  GOVERNMENT
  OTHER

  @@map("business_type")
}

enum EKycStatus {
  PENDING
  IN_PROGRESS
  UNDER_REVIEW
  COMPLETED
  REJECTED
  SUSPENDED
  EXPIRED

  @@map("ekyc_status")
}

enum DocumentType {
  ID_CARD
  PASSPORT
  DRIVERS_LICENSE
  BUSINESS_LICENSE
  TAX_CERTIFICATE
  BANK_STATEMENT
  UTILITY_BILL
  PROOF_OF_ADDRESS
  REGISTRATION_CERTIFICATE
  FINANCIAL_STATEMENT
  MEMORANDUM_OF_ASSOCIATION
  ARTICLES_OF_INCORPORATION
  BOARD_RESOLUTION
  POWER_OF_ATTORNEY
  OTHER

  @@map("document_type")
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  VERIFIED
  REJECTED
  EXPIRED
  PENDING_REVIEW
  REQUIRES_ACTION

  @@map("document_status")
}

enum OtpType {
  EMAIL
  SMS
  VOICE
  AUTHENTICATOR

  @@map("otp_type")
}

enum OtpPurpose {
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  PASSWORD_RESET
  LOGIN_VERIFICATION
  ACCOUNT_RECOVERY
  TRANSACTION_VERIFICATION
  PROFILE_UPDATE

  @@map("otp_purpose")
}

enum NotificationType {
  WELCOME
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
  DOCUMENT_UPLOADED
  DOCUMENT_VERIFIED
  DOCUMENT_REJECTED
  SCORE_UPDATED
  EKYC_COMPLETED
  EKYC_REJECTED
  PASSWORD_RESET
  PASSWORD_CHANGED
  PROFILE_UPDATED
  SECURITY_ALERT
  LOGIN_ALERT
  SYSTEM_MAINTENANCE
  PAYMENT_RECEIVED
  SUBSCRIPTION_EXPIRED
  API_LIMIT_REACHED

  @@map("notification_type")
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
  WEBHOOK

  @@map("notification_channel")
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
  BOUNCED
  COMPLAINED

  @@map("notification_status")
}